<?php

/**
 * @file
 * Primary module hooks for Orange Yelen Trombino module.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

const TROMBINO_VIEW_ID = 'trombino_point_service';
const TROMBINO_VIEW_CURRENT_DISPLAY = 'page_1';
const TROMBINO_VIEW_PAGE_NAME = 'view.'.TROMBINO_VIEW_ID.'.'.TROMBINO_VIEW_CURRENT_DISPLAY;
/**
 * @return array[]
 * @Implement hook_theme()
 */
function orange_yelen_trombino_theme(): array{
  return [
    'orange_yelen_trombino_index' => [
      'variables' => [],
    ],
    'trombino_point_service' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for trombino point service templates.
 *
 * Default template: trombino-point-service.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the trombino point service information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_trombino_point_service(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function orange_yelen_trombino_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish trombino point service.
      $storage = \Drupal::entityTypeManager()->getStorage('trombino_point_service');
      $trombino_point_service_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($trombino_point_service_ids) as $trombino_point_service) {
        $trombino_point_service->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize trombino point service.
      $storage = \Drupal::entityTypeManager()->getStorage('trombino_point_service');
      $trombino_point_service_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($trombino_point_service_ids) as $trombino_point_service) {
        $trombino_point_service->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function orange_yelen_trombino_user_predelete(UserInterface $account): void {
  // Delete trombino point service that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('trombino_point_service');
  $trombino_point_service_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($trombino_point_service_ids)
  );
}

/**
 * Implements hook_preprocess_views_view_unformatted_HOOK() for page templates.
 */
function orange_yelen_trombino_preprocess_views_view_unformatted(array &$variables){
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (_orange_yelen_search__check_path()) {
    $search_term = \Drupal::request()->query->get('search_api_fulltext');
    $variables['orange_yelen_search_term'] = $search_term;
  }
}

/**
 * Page_attachments_alter()
 */
function orange_yelen_trombino_page_attachments_alter(&$page) {
  if(_orange_yelen_trombino__check_path()){
    $page['#attached']['library'][] = 'orange_yelen_trombino/orange-yelen-trombino';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function orange_yelen_trombino_views_pre_render($view) {
  if($view->id() === TROMBINO_VIEW_ID && $view->current_display === 'page_1'){
    foreach ($view->result as &$row) {
      // Récupérer l'entité de chaque ligne de résultat.
      $entity = $row->_entity;
      //dump($entity->getFields());
      // Récupérer les données des champs référencés.
      if ($entity->hasField('type')) {
        $type_term = $entity->get('type')->entity;
        $row->_field_type_label = $type_term ? $type_term->label() : 'N/A';
      }
      if ($entity->hasField('regions')) {
        $region_term = $entity->get('regions')->entity;
        $row->_field_region_label = $region_term ? $region_term->label() : 'N/A';
      }
      if ($entity->hasField('services')) {
        $service_terms = $entity->get('services')->referencedEntities();
        $row->_field_services = array_map(function ($term) {
          return $term->label();
        }, $service_terms);
      }
      if ($entity->hasField('situation_geographique')) {
        $localisation_term = $entity->get('situation_geographique')->value;
        $row->_field_localisation_label = $localisation_term ?: 'N/A';
      }
      if ($entity->hasField('email')) {
        $email = $entity->get('email')->value;
        $row->_field_email = $email ?: 'N/A';
      }
      if ($entity->hasField('phone')) {
        $phone = $entity->get('phone')->value;
        $row->_field_phone = $phone ?: 'N/A';
      }
      if ($entity->hasField('opening_days_hours')) {
        $opening_days_hours = $entity->get('opening_days_hours')->value;
        $row->_field_opening_days_hours = $opening_days_hours ?: 'N/A';
      }
    }
  }
}

function _orange_yelen_trombino__check_path()
{
  // Get path from Route.
  $route = \Drupal::routeMatch()->getRouteName();
  return $route === TROMBINO_VIEW_PAGE_NAME;
}
