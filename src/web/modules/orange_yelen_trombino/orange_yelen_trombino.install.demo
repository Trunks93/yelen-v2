<?php

/**
 * @file
 * Install, update and uninstall functions for the Orange Yelen Trombino module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
  * Implements hook_install().
  */
 function orange_yelen_trombino_install() {
   // Create vocabularies for Types and Regions.
   $vocabularies = [
     'types' => 'Types',
     'regions' => 'Régions',
     'services' => 'Services',
   ];

   foreach ($vocabularies as $vid => $name) {
     if (Vocabulary::load($vid) === NULL) {
       Vocabulary::create([
         'vid' => $vid,
         'name' => $name,
       ])->save();
     }
   }

   // Add sample terms to Types and Regions.
   $terms = [
     'types' => ['Agence', 'Bureau', 'Autre'],
     'regions' => ['Nord', 'Sud', 'Est', 'Ouest'],
     'services' => ['Service 1', 'Service 2', 'Service 3'],
   ];

   foreach ($terms as $vid => $values) {
     foreach ($values as $value) {
       if (Term::load($vid) === NULL) {
         Term::create([
           'vid' => $vid,
           'name' => $value,
         ])->save();
       }
     }
   }

   // Create the Point de Service content type.
   $content_type = 'point_de_service';
   if (\Drupal::entityTypeManager()->getStorage('node_type')->load($content_type) === NULL) {
     $node_type = \Drupal\node\Entity\NodeType::create([
       'type' => $content_type,
       'name' => 'Point de Service',
     ]);
     $node_type->save();

     // Add fields to the content type.
     orange_yelen_trombino_add_fields($content_type);
   }
 }

 /**
  * Add fields to the Point de Service content type.
  */
 function orange_yelen_trombino_add_fields($content_type) {
   // Add fields here.
   $fields = [
     'field_nom' => [
       'type' => 'string',
       'label' => 'Nom',
       'required' => TRUE,
     ],
     'field_type' => [
       'type' => 'entity_reference',
       'label' => 'Type',
       'settings' => [
         'target_type' => 'taxonomy_term',
         'handler_settings' => [
           'target_bundles' => ['types' => 'types'],
         ],
       ],
       'required' => TRUE,
     ],
     'field_regions' => [
       'type' => 'entity_reference',
       'label' => 'Régions',
       'settings' => [
         'target_type' => 'taxonomy_term',
         'handler_settings' => [
           'target_bundles' => ['regions' => 'regions'],
         ],
       ],
       'required' => TRUE,
     ],
     'field_statut' => [
       'type' => 'list_string',
       'label' => 'Statut',
       'settings' => [
         'allowed_values' => [
           'actif' => 'Actif',
           'inactif' => 'Inactif',
         ],
       ],
       'required' => TRUE,
     ],
     'field_concept' => [
       'type' => 'text_long',
       'label' => 'Concept',
       'required' => FALSE,
     ],
     'field_situation_geographique' => [
       'type' => 'text_long',
       'label' => 'Situation Géographique',
       'required' => FALSE,
     ],
     'field_heure_jour_ouverture' => [
       'type' => 'text_long',
       'label' => 'Heure et jour d\'ouverture',
       'required' => FALSE,
     ],
     'field_contact_telephonique' => [
       'type' => 'string',
       'label' => 'Contact téléphonique',
       'required' => FALSE,
     ],
     'field_adresse_email' => [
       'type' => 'email',
       'label' => 'Adresse email',
       'required' => FALSE,
     ],
     'field_services' => [
       'type' => 'entity_reference',
       'label' => 'Services',
       'settings' => [
         'target_type' => 'taxonomy_term',
         'handler_settings' => [
           'target_bundles' => ['services' => 'services'],
         ],
       ],
       'required' => FALSE,
       'cardinality' => -1,
     ],
     'field_partenaire' => [
       'type' => 'string',
       'label' => 'Partenaire',
       'required' => FALSE,
     ],
   ];

   foreach ($fields as $field_name => $field_info) {
     if (FieldStorageConfig::loadByName('node', $field_name) === NULL) {
       FieldStorageConfig::create([
         'field_name' => $field_name,
         'entity_type' => 'node',
         'type' => $field_info['type'],
         'settings' => $field_info['settings'] ?? [],
       ])->save();
     }

     if (FieldConfig::loadByName('node', $content_type, $field_name) === NULL) {
       FieldConfig::create([
         'field_storage' => FieldStorageConfig::loadByName('node', $field_name),
         'bundle' => $content_type,
         'label' => $field_info['label'],
         'required' => $field_info['required'] ?? FALSE,
       ])->save();
     }
   }
 }

 /**
  * Implements hook_uninstall().
  */
 function orange_yelen_trombino_uninstall() {
   // Remove the vocabularies created.
   $vocabularies = ['types', 'regions', 'services'];

   foreach ($vocabularies as $vid) {
     if ($vocabulary = Vocabulary::load($vid)) {
       $vocabulary->delete();
     }
   }

   // Remove the content type.
   $content_type = 'point_de_service';
   if ($node_type = \Drupal\node\Entity\NodeType::load($content_type)) {
     $node_type->delete();
   }
 }
