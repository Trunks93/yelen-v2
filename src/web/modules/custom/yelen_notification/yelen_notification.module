<?php

declare(strict_types=1);

use Drupal\node\Entity\Node;
use Drupal\yelen_notification\Constante\Constante;
use Drupal\yelen_notification\Event\NotificationEvent;
use Drupal\Core\Entity\EntityInterface;
use Drupal\content_moderation\Entity\ContentModerationState;
use Drupal\Core\Site\Settings;
use Drupal\yelen_notification\Event\QuizNotificationEvent;

/**
 * @file
 * Provides a liste diffusion entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\yelen_notification\Services\SendEmailNotification;
use Drupal\yelen_notification\Entity\BroadcastList;


/**
 * Implements hook_cron().
 */
function yelen_notification_cron()
{
  $isExist = _isExist_all_user_broadcastList();
  if ($isExist) {
    //update
    _update_allOrange_BroadcastList($isExist);
  } else {
    //create
    _create_allOrange_BroadcastList();
  }
}


function _isExist_all_user_broadcastList()
{
  $em = \Drupal::entityTypeManager()->getStorage('broadcast_list');
  $allUserBroadcastList = $em->loadByProperties(['label' => 'Tous les utilisateurs Yelen']);
  if (!empty($allUserBroadcastList)) {
    return current($allUserBroadcastList);
  }
  return false;
}

function _update_allOrange_BroadcastList(BroadcastList $currentListe)
{
  $currentMember = $currentListe->field_membres->getValue();
  $user_ids = _getAllOrangeUser($currentMember);
  $position = count($currentMember);
  foreach ($user_ids as $user_id) {
    $currentListe->get('field_membres')->set($position,['target_id' => $user_id]);
    $position++;
  }
  $currentListe->save();
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _create_allOrange_BroadcastList()
{
  $user_ids = _getAllOrangeUser();
  $members = [];
  foreach ($user_ids as $user_id) {
    $members[] = ['target_id' => $user_id];
  }
  $list = BroadcastList::create([
    'label' => 'Tous les utilisateurs Yelen',
    'status' => TRUE,
    'bundle' => 'normal',
    'field_membres' => $members
  ]);
  $list->save();
}

/**
 * @return array
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _getAllOrangeUser(array $currentmembers = []): array
{
  $em = \Drupal::entityTypeManager()->getStorage('user');
  $users = $em->getQuery()
    ->accessCheck(TRUE)
    ->condition('status', true)
    ->condition('mail', '%orange%', 'LIKE');
  if (!empty($currentmembers)) {
    $list = [];
    foreach ($currentmembers as $member) {
      $list[] = $member['target_id'];
    }
    $users->condition('uid', $list, 'NOT IN');
  }

  return $users->execute();
}


/**
 * Implements hook_theme().
 */
function yelen_notification_theme(): array
{

  return [
    'broadcast_list' => ['render element' => 'elements'],
    'mailer' => [
      'render element' => 'elements',
      'variables' => [
        'content' => NULL
      ]
    ],
    'mailer_quiz' => [
      'render element' => 'elements',
      'variables' => [
        'content' => NULL
      ],
      'template' => 'quiz_creation'
    ],
  ];
}

/**
 * Prepares variables for liste diffusion templates.
 *
 * Default template: broadcast-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the liste diffusion information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_broadcast_list(array &$variables): void
{
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implement hook_node_insert()
 * @param Node $node
 */
function yelen_notification_node_insert(Node $node)
{
  $content_type = $node->getType();
  $unauthorized_node = Constante::UNAUTHORIZED_NODES;
  //$content_type != "article" && $content_type != "page" && $content_type != "forum" && $content_type != "sujet"
  if (!in_array($content_type, $unauthorized_node)) {
    $event = new NotificationEvent();
    $event->setNodeId($node->id());
    $event->setNodeTitle($node->getTitle());
    $event->setNodeContentType($node->getType());
    $emailExtractorService = \Drupal::service('yelen_notification.extract.mail');
    $emails = $emailExtractorService->extractMailFromBroadcastList($node, 'field_liste_de_diffusion');
    $event->setEmailAddress($emails);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($event, NotificationEvent::CREATION_CONTENT_PUBLIC);
  }
}

/**
 * Implements hook_mail()
 */
function yelen_notification_mail($key, &$message, $params)
{
  $options = array('langcode' => $message['langcode']);
  if ($key == SendEmailNotification::MODULE_NAME) {
    $message['headers'] = $params['headers'];
    //$message['from'] = $params['from'];
    //$message['from'] = 'admin@synelia.tech';
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['message'];
  }
}

/**
 * Implements hook_entity_update().
 */
function yelen_notification_quiz_update(EntityInterface $entity)
{

  $current_state = $entity->moderation_state->getValue()[0]['target_id'];
  $date = !empty($entity->quiz_date->getValue()) ? $entity->quiz_date->getValue()[0] : [];
  $description = !empty($entity->body->getValue()) ? $entity->body->getValue()[0]['value'] : null;
  $emailExtractorService = \Drupal::service('yelen_notification.extract.mail');
  $emails = $emailExtractorService->extractMailFromBroadcastList($entity, 'field_liste_de_diffusion');
  if ($current_state == Constante::PUBLISHED) {
    $event = new QuizNotificationEvent($entity->id(), $entity->label(), $emails, $date);
    $event->setDescription($description);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($event, QuizNotificationEvent::PUBLISH_QUIZ);
  }
}

/**
 * Implements hook_entity_insert().
 */
/*function yelen_notification_entity_insert(EntityInterface $entity) {
dump('yes');
  _yelen_notification_quiz_if_moderated($entity);
}*/

/*function yelen_notification_content_moderation_state_update(ContentModerationState $entity) {
  dump($entity);
  dd('end');
  //_workbench_email_content_moderation_event_shim($entity);
}*/

